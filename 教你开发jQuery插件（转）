http://www.cnblogs.com/ajianbeyourself/p/5815689.html

根据《jQuery高级编程》的描述，jQuery插件开发方式主要有三种：

  1.通过$.extend()来扩展jQuery
  
  2.通过$.fn 向jQuery添加新的方法(推荐)
  
  3.通过$.widget()应用jQuery UI的部件工厂方式创建

下面我们就来看第二种方式的jQuery插件开发：

 一 先看一下它的基本格式：
   //在这里面,this指的是用jQuery选中的元素
    $.fn.myPlugin = function() {
        //在这里面,this指的是用jQuery选中的元素 $('a')
        this.css('color', 'red');
        this.each(function() {
            //对每个元素进行操作
            $(this).append(' ' + $(this).attr('href'));
        }))
    };
    //调用
     $('a').myPlugin();

二 支持链式调用:
    $.fn.myPlugin = function() {
    //在这里面,this指的是用jQuery选中的元素
    this.css('color', 'red');
    return this.each(function() {
        //对每个元素进行操作
        $(this).append(' ' + $(this).attr('href'));
    }))
}

三 让插件接收参数:

    一个强劲的插件是可以让使用者随意定制的，这要求我们提供在编写插件时就要考虑得全面些，尽量提供合适的参数。

比如现在我们不想让链接只变成红色，我们让插件的使用者自己定义显示什么颜色，要做到这一点很方便，只需要使用者在调用的时候传入一个参数即可。同时我们在插件的代码里面接收。另一方面，为了灵活，使用者可以不传递参数，插件里面会给出参数的默认值。

在处理插件参数的接收上，通常使用jQuery的extend方法，上面也提到过，但那是给extend方法传递单个对象的情况下，这个对象会合并到jQuery身上，所以我们就可以在jQuery身上调用新合并对象里包含的方法了，像上面的例子。当给extend方法传递一个以上的参数时，它会将所有参数对象合并到第一个里。同时，如果对象中有同名属性时，合并的时候后面的会覆盖前面的。

利用这一点，我们可以在插件里定义一个保存插件参数默认值的对象，同时将接收来的参数对象合并到默认对象上，最后就实现了用户指定了值的参数使用指定的值，未指定的参数使用插件默认值。

为了演示方便，再指定一个参数fontSize，允许调用插件的时候设置字体大小。
  
      $.fn.myPlugin = function(options) {
          var defaults = {
              'color': 'red',
              'fontSize': '12px'
          };
          var settings = $.extend(defaults, options);
          return this.css({
              'color': settings.color,
              'fontSize': settings.fontSize
          });
      }
     现在，我们调用的时候指定颜色，字体大小未指定，会运用插件里的默认值12px。

    $('a').myPlugin({
        'color': '#2C9929'
    });
    
    同时指定颜色与字体大小：

    $('a').myPlugin({
        'color': '#2C9929',
        'fontSize': '20px'
        
 
    });
  
  保护好默认参数:
      注意到上面代码调用extend时会将defaults的值改变，这样不好，因为它作为插件因有的一些东西应该维持原样，
      另外就是如果你在后续代码中还要使用这些默认值的话，当你再次访问它时它已经被用户传进来的参数更改了。
      
      一个好的做法是将一个新的空对象做为$.extend的第一个参数，defaults和用户传递的参数对象紧随其后，
      这样做的好处是所有值被合并到这个空对象上， 保护了插件里面的默认值。
  
      $.fn.myPlugin = function(options) {
          var defaults = {
              'color': 'red',
              'fontSize': '12px'
          };
          var settings = $.extend({},defaults, options);//将一个空对象做为第一个参数
          return this.css({
              'color': settings.color,
              'fontSize': settings.fontSize
          });
      }
      
