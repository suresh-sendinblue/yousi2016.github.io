http://www.cnblogs.com/ajianbeyourself/p/5815689.html

根据《jQuery高级编程》的描述，jQuery插件开发方式主要有三种：

  1.通过$.extend()来扩展jQuery
  
  2.通过$.fn 向jQuery添加新的方法(推荐)
  
  3.通过$.widget()应用jQuery UI的部件工厂方式创建

下面我们就来看第二种方式的jQuery插件开发：

 一 先看一下它的基本格式：
   //在这里面,this指的是用jQuery选中的元素
    $.fn.myPlugin = function() {
        //在这里面,this指的是用jQuery选中的元素 $('a')
        this.css('color', 'red');
        this.each(function() {
            //对每个元素进行操作
            $(this).append(' ' + $(this).attr('href'));
        }))
    };
    //调用
     $('a').myPlugin();

二 支持链式调用:
    $.fn.myPlugin = function() {
    //在这里面,this指的是用jQuery选中的元素
    this.css('color', 'red');
    return this.each(function() {
        //对每个元素进行操作
        $(this).append(' ' + $(this).attr('href'));
    }))
}

三 让插件接收参数:

    一个强劲的插件是可以让使用者随意定制的，这要求我们提供在编写插件时就要考虑得全面些，尽量提供合适的参数。

比如现在我们不想让链接只变成红色，我们让插件的使用者自己定义显示什么颜色，要做到这一点很方便，只需要使用者在调用的时候传入一个参数即可。
同时我们在插件的代码里面接收。另一方面，为了灵活，使用者可以不传递参数，插件里面会给出参数的默认值。

在处理插件参数的接收上，通常使用jQuery的extend方法，上面也提到过，但那是给extend方法传递单个对象的情况下，这个对象会合并到jQuery身上，
所以我们就可以在jQuery身上调用新合并对象里包含的方法了，像上面的例子。当给extend方法传递一个以上的参数时，它会将所有参数对象合并到第一个里。
时，如果对象中有同名属性时，合并的时候后面的会覆盖前面的。

利用这一点，我们可以在插件里定义一个保存插件参数默认值的对象，同时将接收来的参数对象合并到默认对象上，最后就实现了用户指定了值的参数使用指定的值，
未指定的参数使用插件默认值。

为了演示方便，再指定一个参数fontSize，允许调用插件的时候设置字体大小。
  
      $.fn.myPlugin = function(options) {
          var defaults = {
              'color': 'red',
              'fontSize': '12px'
          };
          var settings = $.extend(defaults, options);
          return this.css({
              'color': settings.color,
              'fontSize': settings.fontSize
          });
      }
     现在，我们调用的时候指定颜色，字体大小未指定，会运用插件里的默认值12px。

    $('a').myPlugin({
        'color': '#2C9929'
    });
    
    同时指定颜色与字体大小：

    $('a').myPlugin({
        'color': '#2C9929',
        'fontSize': '20px'
        
 
    });
  
  保护好默认参数:
      注意到上面代码调用extend时会将defaults的值改变，这样不好，因为它作为插件因有的一些东西应该维持原样，
      另外就是如果你在后续代码中还要使用这些默认值的话，当你再次访问它时它已经被用户传进来的参数更改了。
      
      一个好的做法是将一个新的空对象做为$.extend的第一个参数，defaults和用户传递的参数对象紧随其后，
      这样做的好处是所有值被合并到这个空对象上， 保护了插件里面的默认值。
  
      $.fn.myPlugin = function(options) {
          var defaults = {
              'color': 'red',
              'fontSize': '12px'
          };
          var settings = $.extend({},defaults, options);//将一个空对象做为第一个参数
          return this.css({
              'color': settings.color,
              'fontSize': settings.fontSize
          });
      }
      到此，插件可以接收和处理参数后，就可以编写出更健壮而灵活的插件了。若要编写一个复杂的插件，代码量会很大，
      如何组织代码就成了一个需要面临的问题，没有一个好的方式来组织这些代码，整体感觉会杂乱无章，同时也不好维护，
      所以将插件的所有方法属性包装到一个对象上，用面向对象的思维来进行开发，无疑会使工作轻松很多。
      
 四 面向对象的插件开发：
 
        为什么要有面向对象的思维，因为如果不这样，你可能需要一个方法的时候就去定义一个function，当需要另外一个方法的时候，再去随便定义一个function，
        同样，需要一个变量的时候，毫无规则地定义一些散落在代码各处的变量。

    还是老问题，不方便维护，也不够清晰。当然，这些问题在代码规模较小时是体现不出来的。

    如果将需要的重要变量定义到对象的属性上，函数变成对象的方法，当我们需要的时候通过对象来获取，一来方便管理，二来不会影响外部命名空间，
    因为所有这些变量名还有方法名都是在对象内部。

    接着上面的例子，我们可以把这个插件抽象成一个美化页面的对象，因为他的功能是设置颜色啊字体啊什么的，当然我们还可以加入其他功能比如设置下划线啊什么的。当然对于这个例子抽象成对象有点小题大做，这里仅作演示用。以后我可能会介绍我编写的一个jQuery插件SlipHover,其中代码就比较多，这样的模式就用得上了。

    所以我们新建一个对象命名为Beautifier，然后我们在插件里使用这个对象来编码。
    
    //定义Beautifier的构造函数
      var Beautifier = function(ele, opt) {
          this.$element = ele,
          this.defaults = {
              'color': 'red',
              'fontSize': '12px',
              'textDecoration':'none'
          },
          this.options = $.extend({}, this.defaults, opt)
      }
      //定义Beautifier的方法
      Beautifier.prototype = {
          beautify: function() {
              return this.$element.css({
                  'color': this.options.color,
                  'fontSize': this.options.fontSize,
                  'textDecoration': this.options.textDecoration
              });
          }
      }
      //在插件中使用Beautifier对象
      $.fn.myPlugin = function(options) {
          //创建Beautifier的实体
          var beautifier = new Beautifier(this, options);
          //调用其方法
          return beautifier.beautify();
      }
      
    通过上面这样一改造，我们的代码变得更面向对象了，也更好维护和理解，以后要加新功能新方法，只需向对象添加新变量及方法即可，
    然后在插件里实例化后即可调用新添加的东西。

    插件的调用还是一样的，我们对代码的改动并不影响插件其他地方，只是将代码的组织结构改动了而以。
    
    $(function() {
        $('a').myPlugin({
            'color': '#2C9929',
            'fontSize': '20px'
        });
    });
    
    指定文字带下划线（我们在Beautifier对象中新加的功能，默认不带下划线，如上面的例子）的调用：

    $(function() {
        $('a').myPlugin({
            'color': '#2C9929',
            'fontSize': '20px',
            'textDecoration': 'underline'
        });
    });
    
五 关于命名空间：
  
    不仅仅是jQuery插件的开发，我们在写任何JS代码时都应该注意的一点是不要污染全局命名空间。因为随着你代码的增多，
    如果有意无意在全局范围内定义一些变量的话，最后很难维护，也容易跟别人写的代码有冲突。

    比如你在代码中向全局window对象添加了一个变量status用于存放状态，同时页面中引用了另一个别人写的库，也向全局添加了这样一个同名变量，
    最后的结果肯定不是你想要的。所以不到万不得已，一般我们不会将变量定义成全局的。

    一个好的做法是始终用自调用匿名函数包裹你的代码，这样就可以完全放心，安全地将它用于任何地方了，绝对没有冲突。  
    
六  用自调用匿名函数包裹你的代码
    
    我们知道JavaScript中无法用花括号方便地创建作用域，但函数却可以形成一个作用域，域内的代码是无法被外界访问的。如果我们将自己的代码放入一个函数中，
    那么就不会污染全局命名空间，同时不会和别的代码冲突。

如上面我们定义了一个Beautifier全局变量，它会被附到全局的window对象上，为了防止这种事情发生，你或许会说，把所有代码放到jQuery的插件定义代码里面去啊，
也就是放到$.fn.myPlugin里面。这样做倒也是种选择。但会让我们实际跟插件定义有关的代码变得臃肿，而在$.fn.myPlugin里面我们其实应该更专注于插件的调用，
以及如何与jQuery互动。

    所以保持原来的代码不变，我们将所有代码用自调用匿名函数包裹。
    
    (function() {
    //定义Beautifier的构造函数
    var Beautifier = function(ele, opt) {
        this.$element = ele,
        this.defaults = {
            'color': 'red',
            'fontSize': '12px',
            'textDecoration': 'none'
        },
        this.options = $.extend({}, this.defaults, opt)
    }
    //定义Beautifier的方法
    Beautifier.prototype = {
        beautify: function() {
            return this.$element.css({
                'color': this.options.color,
                'fontSize': this.options.fontSize,
                'textDecoration': this.options.textDecoration
            });
        }
    }
    //在插件中使用Beautifier对象
    $.fn.myPlugin = function(options) {
        //创建Beautifier的实体
        var beautifier = new Beautifier(this, options);
        //调用其方法
        return beautifier.beautify();
    }
})();

  这样做的好处，也就是上面所阐述的那样。另外还有一个好处就是，自调用匿名函数里面的代码会在第一时间执行，页面准备好过后，上面的代码就将插件准备好了，
  以方便在后面的代码中使用插件。

目前为止似乎接近完美了。如果再考虑到其他一些因素，比如我们将这段代码放到页面后，前面别人写的代码没有用分号结尾，
或者前面的代码将window, undefined等这些系统变量或者关键字修改掉了，正好我们又在自己的代码里面进行了使用，那结果也是不可预测的，这不是 我们想要的。
我知道其实你还没太明白，下面详细介绍。

将系统变量以变量形式传递到插件内部

来看下面的代码，你猜他会出现什么结果？

var foo=function(){
    //别人的代码
}//注意这里没有用分号结尾

//开始我们的代码。。。
(function(){
    //我们的代码。。
    alert('Hello!');
})();
    本来别人的代码也正常工作，只是最后定义的那个函数没有用分号结尾而以，然后当页面中引入我们的插件时，报错了，我们的代码无法正常执行。
    
    原因是我们用来充当自调用匿名函数的第一对括号与上面别人定义的函数相连，因为中间没有分号嘛，总之我们的代码无法正常解析了，所以报错。

      所以好的做法是我们在代码开头加一个分号，这在任何时候都是一个好的习惯。

      var foo=function(){
          //别人的代码
      }//注意这里没有用分号结尾

      //开始我们的代码。。。
      ;(function(){
          //我们的代码。。
          alert('Hello!');
      })();
      
      同时，将系统变量以参数形式传递到插件内部也是个不错的实践。

      当我们这样做之后，window等系统变量在插件内部就有了一个局部的引用，可以提高访问速度，会有些许性能的提升

      最后我们得到一个非常安全结构良好的代码：

      ;(function($,window,document,undefined){
          //我们的代码。。
          //blah blah blah...
      })(jQuery,window,document);
      
      
      而至于这个undefined，稍微有意思一点，为了得到没有被修改的undefined，我们并没有传递这个参数，但却在接收时接收了它，因为实际并没有传，
      所以‘undefined’那个位置接收到的就是真实的'undefined'了。是不是有点hack的味道，值得细细体会的技术，当然不是我发明的，都是从前人的经验中学习。

所以最后我们的插件成了这样：

;(function($, window, document,undefined) {
    //定义Beautifier的构造函数
    var Beautifier = function(ele, opt) {
        this.$element = ele,
        this.defaults = {
            'color': 'red',
            'fontSize': '12px',
            'textDecoration': 'none'
        },
        this.options = $.extend({}, this.defaults, opt)
    }
    //定义Beautifier的方法
    Beautifier.prototype = {
        beautify: function() {
            return this.$element.css({
                'color': this.options.color,
                'fontSize': this.options.fontSize,
                'textDecoration': this.options.textDecoration
            });
        }
    }
    //在插件中使用Beautifier对象
    $.fn.myPlugin = function(options) {
        //创建Beautifier的实体
        var beautifier = new Beautifier(this, options);
        //调用其方法
        return beautifier.beautify();
    }
})(jQuery, window, document);
 

一个安全，结构良好，组织有序的插件编写完成。

