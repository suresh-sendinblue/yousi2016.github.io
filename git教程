一 下载安装
    1.下载地址：https://git-for-windows.github.io
    
    2.设置名字和Email地址
      $ git config --global user.name "Your Name"
      $ git config --global user.email "email@example.com"
      
二 创建版本库
    1.创建一个空目录：$ mkdir learngit
    
    2.进入此目录：$ cd learngit
    
    3.显示当前命令：$ pwd
    
    4.把这个目录变成Git可以管理的仓库：$ git init
    
    5.下载Notepad++(下载地址：https://notepad-plus-plus.org/)代替记事本
    
      Notepad++的默认编码设置为UTF-8 without BOM
      
    6.在learngit文件夹下新建一个readme.txt
    
      内容：
      Git is a version control system.
      Git is free software.
      
    7.将工作区文件添加到暂存区：$ git add readme.txt
    
    8.将暂存区文件添加到版本库：$ git commit -m "wrote a readme file"
    
三 时光机穿梭

    1.继续修改readme.txt文件
        内容：
        Git is a distributed version control system.
        Git is free software.
        
    2.运行命令查看结果：$ git status
    
    3.查看对readme.txt的修改内容：$ git diff readme.txt 
    
    4.$ git add readme.txt
    
    5.$ git status
    
    6.$ git commit -m "add distributed"
    
    7.$ git status

四 版本回退
    
    1.继续修改readme.txt文件
        内容：
        Git is a distributed version control system.
        Git is free software distributed under the GPL.
        
    2.  $ git add readme.txt
        $ git commit -m "append GPL"
    
    3.打印修改的历史记录：$ git log
      只打印commit id（版本号）：$ git log --pretty=oneline
      
    4.把当前版本“append GPL”回退到上一个版本“add distributed”：$ git reset --hard HEAD^
    
    5.看看readme.txt的内容是不是版本add distributed：$ cat readme.txt
    
    6.再看看现在版本库的状态：$ git log
    
    7.指定回到未来的某个版本：$ git reset --hard  e0d9792
        同时readme.txt内容会变化，得重新保存
        
    8.再看看readme.txt的内容：$ cat readme.txt
    
    9.记录你的每一次命令：$ git reflog
    
五 工作区和暂存区和版本库

    1.工作区：learngit文件夹
    
    2.暂存区：git add的地方
    
    3.版本库：包括暂存区和master
    
    4.再练习一遍，先对readme.txt做个修改
        内容：
        Git is a distributed version control system.
        Git is free software distributed under the GPL.
        Git has a mutable index called stage.
    
    5.在工作区新增一个LICENSE文本文件（内容随便写）
    
    6.先用git status查看一下状态：$ git status
    
    7.把readme.txt和LICENSE都添加到暂存区：$ git add .
    
    8.用git status再查看一下：$ git status
    
    9.执行git commit就可以一次性把暂存区的所有修改提交到分支:$ git commit -m "understand how stage works"
    
    10.$ git status
        暂存区就没有任何内容了
        
六 管理修改

    1.对readme.txt做一个修改，添加一行： Git tracks changes.
                     
    2.然后，添加：$ git add readme.txt
                 $ git status
    
    3.然后，再修改readme.txt，添加一行：Git tracks changes of files.
        
    
    4.提交：$ git commit -m "git tracks changes"
    
    5.提交后，再看看状态：$ git status
    
    6.可以查看工作区和版本库里面最新版本的区别：$ git diff HEAD -- readme.txt 

七 撤销修改

    1.你在readme.txt中添加了一行：My stupid boss still prefers SVN.
    
    2.把readme.txt文件在工作区的修改全部撤销：$ git checkout -- readme.txt
    
    3.把暂存区的修改撤销掉（unstage），重新放回工作区：$ git reset HEAD readme.txt
        现在暂存区是干净的，工作区有修改
        
    4.丢弃工作区的修改：$ git checkout -- readme.txt
    
    
        

        
    
    

    
    
    
